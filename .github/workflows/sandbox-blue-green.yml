name: Stage. CI/CD with Blue/Green Deployment
run-name: ${{ github.actor }} is running GitHub Actions ðŸš€

on:
  workflow_dispatch:
    inputs:
      software-setup:
        description: 'Setup/configure required software on EC2 instances (Optional)'
        default: false
        type: boolean
      deployment-env:
        description: 'Deployment environment'
        required: true
        default: 'blue'
        type: choice
        options:
          - blue
          - green
      git-ref:
        description: 'Git Reference (Optional. branch/commit hash)'
        required: false
      jira-id:
        description: 'Jira Release ID (Optional)'
        required: false

env:
    AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    ENV_FILE_SECRET_NAME: sandbox/env
    SAS_GIT_DEPLOY_KEY_SECRET_NAME: sandbox/sas_git_deploy_key
    SYMFONY_GIT_DEPLOY_KEY_SECRET_NAME: sandbox/symfony_deploy_key
    DATADOG_API_KEY_SECRET_NAME: sandbox/datadog_api_key
    SLACK_WEBHOOK_SECRET_NAME: sandbox/slack_webhook
    API_KEY_SECRET_NAME: sandbox/api_key
    DB_HOST_SECRET_NAME: sandbox/mysql/db_host
    DB_PASSWORD_SECRET_NAME: sandbox/mysql/db_password
    ZOHO_SECRET_NAME: sandbox/zoho
    GIT_DEPLOY_KEY_SECRET_NAME: sandbox/infrastructure_deploy_key
    AWS_DEFAULT_REGION: eu-west-1
    GIT_BRANCH: main

jobs:
    build:
        runs-on: ubuntu-latest
        name: Build Docker image
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                fetch-depth: 0
                ref: ${{ env.GIT_BRANCH }}
              if: github.event.inputs.git-ref == ''

            - name: Checkout Repository (Custom Git Reference)
              uses: actions/checkout@v4
              with:
                fetch-depth: 0
                ref: ${{ github.event.inputs.git-ref }}
              if: github.event.inputs.git-ref != ''

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
                aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_DEFAULT_REGION }}
            
            - name: Get secrets from aws secret manager
              uses: aws-actions/aws-secretsmanager-get-secrets@v2
              with:
                secret-ids: |
                    INFRASTRUCTURE_GIT_DEPLOY_KEY, ${{ env.GIT_DEPLOY_KEY_SECRET_NAME }}
                    SAS_GIT_DEPLOY_KEY, ${{ env.SAS_GIT_DEPLOY_KEY_SECRET_NAME }}
                    SYMFONY_GIT_DEPLOY_KEY, ${{ env.SYMFONY_GIT_DEPLOY_KEY_SECRET_NAME }}
                    DATADOG_API_KEY, ${{ env.DATADOG_API_KEY_SECRET_NAME }}
                    SLACK_WEBHOOK, ${{ env.SLACK_WEBHOOK_SECRET_NAME }}

            - name: generate .env file
              run: ./aws_secret_manager.sh  ${{ env.ENV_FILE_SECRET_NAME }} .env
            
            - name: get api keys secret
              run: ./aws_secret_manager.sh  ${{ env.API_KEY_SECRET_NAME }} .env

            - name: get dh_host secret
              run: ./aws_secret_manager.sh  ${{ env.DB_HOST_SECRET_NAME }} .env
            
            - name: get dh_password secret
              run: ./aws_secret_manager.sh  ${{ env.DB_PASSWORD_SECRET_NAME }} .env

            - name: get zoho secret
              run: ./aws_secret_manager.sh  ${{ env.ZOHO_SECRET_NAME }} .env

            - name: test .env
              run: cat .env

            - name: Copy Infrastructure git deploy key
              run: |
                touch /tmp/deploy-key-file.pem
                echo "${{ env.INFRASTRUCTURE_GIT_DEPLOY_KEY }}" > /tmp/deploy-key-file.pem
                chmod 0600 /tmp/deploy-key-file.pem
              shell: bash

       